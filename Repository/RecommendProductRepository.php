<?php
/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) 2000-2015 LOCKON CO.,LTD. All Rights Reserved.
 *
 * http://www.lockon.co.jp/
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */


namespace Plugin\Recommend\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Eccube\Entity\Master\Disp;
use Plugin\Recommend\Entity\RecommendProduct;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * RecommendProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RecommendProductRepository extends EntityRepository
{
    /**
     * Find by rank up
     * @param integer $rank
     * @return mixed
     * @throws NotFoundHttpException
     */
    public function findByRankUp($rank)
    {
        try {
            $qb = $this->createQueryBuilder('rp')
                ->andWhere('rp.rank > :rank')
                ->addOrderBy('rp.rank', 'ASC')
                ->setMaxResults(1);

            $Product = $qb
                ->getQuery()
                ->setParameters(array(
                    'rank' => $rank,
                ))
                ->getSingleResult();

            return $Product;
        } catch (NoResultException $e) {
            throw new NotFoundHttpException();
        }
    }

    /**
     * Find by rank down
     * @param integer $rank
     * @return mixed
     * @throws NotFoundHttpException
     */
    public function findByRankDown($rank)
    {
        try {
            $qb = $this->createQueryBuilder('rp')
                ->andWhere('rp.rank < :rank')
                ->addOrderBy('rp.rank', 'DESC')
                ->setMaxResults(1);

            $Product = $qb
                ->getQuery()
                ->setParameters(array(
                    'rank' => $rank,
                ))
                ->getSingleResult();

            return $Product;
        } catch (NoResultException $e) {
            throw new NotFoundHttpException();
        }
    }

    /**
     * Get max rank
     * @return mixed
     */
    public function getMaxRank()
    {
        // 最大のランクを取得する.
        $sql = "SELECT MAX(m.rank) AS max_rank FROM Plugin\Recommend\Entity\RecommendProduct m";
        $q = $this->getEntityManager()->createQuery($sql);

        return $q->getSingleScalarResult();
    }

    /**
     * @param Disp $Disp
     * @return array
     */
    public function getRecommendProduct(Disp $Disp)
    {
        $query = $this->createQueryBuilder('rp')
            ->innerJoin('Eccube\Entity\Product', 'p', 'WITH', 'p.id = rp.Product')
            ->where('p.Status = :Disp')
            ->orderBy('rp.rank', 'DESC')
            ->setParameter('Disp', $Disp)
            ->getQuery();

        return $query->getResult();
    }

    /**
     * @param array $arrRank
     * @return bool
     * @throws \Exception
     */
    public function moveRecommendRank(array $arrRank)
    {
        $this->getEntityManager()->beginTransaction();
        try {
            foreach ($arrRank as $recommendId => $rank) {
                /* @var $Recommend RecommendProduct */
                $Recommend = $this->find($recommendId);
                if ($Recommend->getRank() == $rank) {
                    continue;
                }
                $Recommend->setRank($rank);
                $this->getEntityManager()->persist($Recommend);
            }
            $this->getEntityManager()->flush();
            $this->getEntityManager()->commit();
        } catch (\Exception $e) {
            $this->getEntityManager()->rollback();
            throw $e;
        }

        return true;
    }

    /**
     * @param RecommendProduct $RecommendProduct
     * @return bool
     * @throws \Exception
     */
    public function saveRecommend(RecommendProduct $RecommendProduct)
    {
        $this->getEntityManager()->beginTransaction();
        try {
            $this->getEntityManager()->persist($RecommendProduct);
            $this->getEntityManager()->flush();
            $this->getEntityManager()->commit();
        } catch (\Exception $e) {
            $this->getEntityManager()->rollback();
            throw $e;
        }

        return true;
    }
}
